name: Deploy to Production Server
on:
  push:
    branches:
      - develop # Dev (preview) environment
      - main # Prod environment
  workflow_dispatch:

jobs:
  info:
    name: Gather info for jobs
    # Gathering info should not take more that 1 minute.
    timeout-minutes: 1
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.environment.outputs.env_name }}
      branch: ${{ steps.environment.outputs.branch }}
      tag: ${{ steps.environment.outputs.tag }}
    steps:
      - name: Get tag
        run: |
          trigger=${GITHUB_REF_TYPE}
          tag=$([ ${trigger} == tag ] && echo "${GITHUB_REF_NAME}" || echo "none" )
          echo "tag=${tag}" >> $GITHUB_OUTPUT

          echo "::group::Tag"
          echo 'tag: '${tag}
          echo "::endgroup::"
        shell: bash
        id: tag

      - name: Get target branch
        run: |
          # Get the target branch
          branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            branch=${{ github.event.pull_request.base.ref }}
          fi

          if [[ $branch == refs/tags/* ]]; then
            branch=$(echo "${{ steps.tag.outputs.tag }}"| cut -d'|' -f 3)
          fi
          echo "branch=${branch}" >> $GITHUB_OUTPUT

          echo "::group::Target Branch"
          echo 'branch: '${branch}
          echo "::endgroup::"
        shell: bash
        id: target_branch

      # For info on Github Environments, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
      - name: Get environment
        run: |
          # See https://askubuntu.com/a/889746
          shopt -s extglob

          env=dev
          case "${{ steps.target_branch.outputs.branch }}" in
            develop)    read -r env <<< "dev";      ;;
            main)       read -r env <<< "prod";     ;;
          esac

          case "${{ steps.tag.outputs.tag }}" in
            *-dev)                                              read -r env <<< "dev";      ;;
            +([0-9]).+([0-9]).+([0-9])?(-|+)*([0-9A-Za-z+-.]))  read -r env <<< "prod";     ;;
          esac

          echo "name=${env}" >> $GITHUB_OUTPUT

          echo "::group::Environment"
          echo 'environment: '${env}
          echo "::endgroup::"
        shell: bash
        id: environment

  deploy:
    name: Deploy to ${{ needs.info.outputs.env_name }}
    runs-on: ubuntu-latest
    needs: [info]
    environment:
      name: ${{ needs.info.outputs.env_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Version and Release Setup
        run: |
          version=$(cat package.json | jq -r '.version')

          appendage=".${{ needs.info.outputs.branch }}"
          if [[ "${{ needs.info.outputs.env_name }}" == "prod" ]]; then
            appendage=""
          fi
          version_tag="${version}${appendage}"

          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
          echo "semver=${version}" >> $GITHUB_OUTPUT

          echo "::group::Version Tag"
          echo 'Version Tag: '${version_tag}
          echo "::endgroup::"

          echo "::group::Semantic Version"
          echo 'Version: '${version}
          echo "::endgroup::"
        shell: bash
        id: version

      - name: Check for Tag
        run: |
          tag="${{ steps.version.outputs.version_tag }}"

          if git show-ref --tags --verify --quiet "refs/tags/${tag}"; then
              echo "The tag ${tag} already exists, skipping deploy."
              exit 1
          fi
          echo "Proceeding with deploy."
        shell: bash

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          makeLatest: ${{ needs.info.outputs.env_name == 'prod' }}
          name: ${{ steps.version.outputs.version_tag }}
          prerelease: ${{ needs.info.outputs.env_name != 'prod' }}
          skipIfReleaseExists: true
          tag: ${{ steps.version.outputs.version_tag }}
